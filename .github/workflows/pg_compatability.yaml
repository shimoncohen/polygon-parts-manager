name: pg_compatability

on:
  #pull_request:
  #  types: [labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:

env: 
  DB_HOST: localhost
  

jobs:
  create_comment:
    name: Create comment
    runs-on: ubuntu-latest
    if: github.event.comment.body == 'pg-check'

    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Postgres and postgis compatability
      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            **Postgres and postgis compatability:**
      - name: Update comment
        if: steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            **${{ github.event.comment.created_at }}**

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    #if: contains(github.event.pull_request.labels.*.name, 'pg-check') && github.event.review.state == 'approved'
    #if: github.event.comment.body == 'pg-check'

    strategy:
      fail-fast: false
      matrix:
        node: [20.x]
        postgres: [12-2.5, 12-3.3]

    services:
      postgres:
        # Docker Hub image
        image: postgis/postgis:${{matrix.postgres}}
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install TS Project dependencies
        run: npm ci

      - name: Run tests
        id: test
        run: npm run test

      #- name: PR Comment
      #  uses: actions/github-script@v7
      #  if: always()
      #  with:
      #    script: |
      #      github.rest.issues.createComment({
      #        issue_number: context.issue.number,
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        body: '${{ steps.test.outcome == 'success' && ':white_check_mark:' || ':x:' }} run postgis/postgis:${{matrix.postgres}}'
      #      })
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        if: always() && github.event.comment.body == 'pg-check'
        id: fc
        with:
          issue-number: ${{ github.event.issue.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Postgres and postgis compatability
  
      - name: Update comment
        if: always() && github.event.comment.body == 'pg-check' && steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ${{ steps.test.outcome == 'success' && ':white_check_mark:' || ':x:' }} run for `postgis/postgis:${{matrix.postgres}}`
