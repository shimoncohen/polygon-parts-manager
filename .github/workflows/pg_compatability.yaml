name: pg_compatability

on:
  #pull_request:
  #  types: [labeled]
  #issue_comment:
  #  types: [created]
  workflow_dispatch:

env: 
  DB_HOST: localhost
  

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    #if: contains(github.event.pull_request.labels.*.name, 'pg-check') && github.event.review.state == 'approved'
    if: github.event.comment.body == 'pg-check'

    strategy:
      fail-fast: false
      matrix:
        node: [20.x]
        postgres: [12-2.5, 12-3.3, 12-3.5, 13-3.3, 13-3.5, 14-3.3, 14-3.5, 16-3.5, 17-3.5]

    services:
      postgres:
        # Docker Hub image
        image: postgis/postgis:${{matrix.postgres}}
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install TS Project dependencies
        run: npm ci

      - name: Run tests
        id: test
        run: npm run test

      - name: PR Comment
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.test.outcome == 'success' && ':white_check_mark:' || ':x:' }} run postgis/postgis:${{matrix.postgres}}'
            })
